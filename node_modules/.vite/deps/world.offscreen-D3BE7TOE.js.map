{
  "version": 3,
  "sources": ["../../@3d-dice/dice-box/src/components/world.offscreen.js"],
  "sourcesContent": ["import worldWorker from './offscreenCanvas.worker?worker&inline' // using vite.js worker import - this will be compiled away\n\nclass WorldOffScreen {\n\tinitialized = false\n\toffscreenWorkerInit = false\n\tthemeLoadedInit = false\n\tpendingThemePromises = {}\n\t#offscreenCanvas\n\t#OffscreenWorker\n\t// onInitComplete = () => {} // init callback\n\tonRollResult = () => {} // individual die callback\n\tonRollComplete = () => {} // roll group callback\n\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete\n\n\t\t// transfer control offscreen\n\t\tthis.#offscreenCanvas = options.canvas.transferControlToOffscreen()\n\n\t\t// initialize 3D World in which BabylonJS runs\n\t\tthis.#OffscreenWorker = new worldWorker()\n\t\t// need to initialize the web worker and get confirmation that initialization is complete before other scripts can run\n\t\t// set a property on the worker to a promise that is resolve when the proper message is returned from the worker\n\t\tthis.#OffscreenWorker.init = new Promise((resolve, reject) => {\n\t\t\tthis.offscreenWorkerInit = resolve\n\t\t})\n\n\t\tthis.initialized = this.#initScene(options)\n\t}\n\n\t// initialize the babylon scene\n\tasync #initScene(config) {\n\t\t// initialize the offscreen worker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction: \"init\",\n\t\t\tcanvas: this.#offscreenCanvas,\n\t\t\twidth: config.canvas.clientWidth,\n\t\t\theight: config.canvas.clientHeight,\n\t\t\toptions: config.options,\n\t\t}, [this.#offscreenCanvas])\n\n\t\t// handle messages from offscreen BabylonJS World\n\t\tthis.#OffscreenWorker.onmessage = (e) => {\n\t\t\tswitch( e.data.action ) {\n\t\t\t\tcase \"init-complete\":\n\t\t\t\t\tthis.offscreenWorkerInit() //fulfill promise so other things can run\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"connect-complete\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"theme-loaded\":\n\t\t\t\t\tif(e.data.id){\n\t\t\t\t\t\tthis.pendingThemePromises[e.data.id](e.data.id)\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-result':\n\t\t\t\t\tthis.onRollResult(e.data.die)\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roll-complete':\n\t\t\t\t\tthis.onRollComplete()\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'die-removed':\n\t\t\t\t\tthis.onDieRemoved(e.data.rollId)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// await Promise.all([this.#OffscreenWorker.init])\n\t\tawait this.#OffscreenWorker.init\n\n\t\tthis.onInitComplete(true)\n\n\t\treturn true\n\t}\n\n\tconnect(port){\n\t\t// Setup the connection: Port 1 is for this.#OffscreenWorker\n\t\tthis.#OffscreenWorker.postMessage({\n\t\t\taction : \"connect\",\n\t\t\tport\n\t\t},[ port ])\n\t}\n\n\tupdateConfig(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"updateConfig\", options});\n\t}\n\n\tresize(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"resize\", options});\n\t}\n\n\tasync loadTheme(options) {\n\t\t// prevent multiple requests of the same theme\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(Object.keys(this.pendingThemePromises).includes(options.theme)) {\n\t\t\t\treturn resolve()\n\t\t\t}\n\n\t\t\tthis.pendingThemePromises[options.theme] = resolve\n\t\t\tthis.#OffscreenWorker.postMessage({action: \"loadTheme\", options})\n\t\t}).catch(error => console.error(error))\n\t}\n\n\tclear(){\n\t\tthis.#OffscreenWorker.postMessage({action: \"clearDice\"})\n\t}\n\n\tadd(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addDie\", options})\n\t}\n\t\n\taddNonDie(options){\n\t\tthis.#OffscreenWorker.postMessage({action: \"addNonDie\", options})\n\t}\n\n\tremove(options){\n\t\t// remove the die from the render\n\t\tthis.#OffscreenWorker.postMessage({action: \"removeDie\", options})\n\t}\n}\n\nexport default WorldOffScreen"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,IAAN,MAAqB;;EAWpB,YAAYC,GAAQ;AAkBpBC,MAAA,MAAMC,CAAAA;AA5BNC,MAAA,MAAA,eAAc,KAAA;AACdA,MAAA,MAAA,uBAAsB,KAAA;AACtBA,MAAA,MAAA,mBAAkB,KAAA;AAClBA,MAAA,MAAA,wBAAuB,CAAE,CAAA;AACzBF,MAAA,MAAAG,GAAA,MAAA;AACAH,MAAA,MAAAI,GAAA,MAAA;AAEAF,MAAA,MAAA,gBAAe,MAAM;IAAE,CAAA;AACvBA,MAAA,MAAA,kBAAiB,MAAM;IAAE,CAAA;AAGxB,SAAK,iBAAiBH,EAAQ,gBAG9BM,EAAA,MAAKF,GAAmBJ,EAAQ,OAAO,2BAA4B,CAAA,GAGnEM,EAAA,MAAKD,GAAmB,IAAIE,EAAa,CAAA,GAGzCC,EAAA,MAAKH,CAAAA,EAAiB,OAAO,IAAI,QAAQ,CAACI,GAASC,MAAW;AAC7D,WAAK,sBAAsBD;IAC9B,CAAG,GAED,KAAK,cAAcE,EAAA,MAAKT,GAAAU,CAAAA,EAAL,KAAA,MAAgBZ,CAAAA;EACnC;EA6CD,QAAQa,GAAK;AAEZL,MAAA,MAAKH,CAAAA,EAAiB,YAAY;MACjC,QAAS;MACT,MAAAQ;IACH,GAAI,CAAEA,CAAI,CAAE;EACV;EAED,aAAab,GAAQ;AACpBQ,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,gBAAgB,SAAAL,EAAO,CAAC;EACnE;EAED,OAAOA,GAAQ;AACdQ,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,UAAU,SAAAL,EAAO,CAAC;EAC7D;EAED,MAAM,UAAUA,GAAS;AAExB,WAAO,IAAI,QAAQ,CAACS,GAASC,MAAW;AACvC,UAAG,OAAO,KAAK,KAAK,oBAAoB,EAAE,SAASV,EAAQ,KAAK;AAC/D,eAAOS,EAAS;AAGjB,WAAK,qBAAqBT,EAAQ,KAAK,IAAIS,GAC3CD,EAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,aAAa,SAAAL,EAAO,CAAC;IACnE,CAAG,EAAE,MAAM,CAAAc,MAAS,QAAQ,MAAMA,CAAK,CAAC;EACtC;EAED,QAAO;AACNN,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,YAAW,CAAC;EACvD;EAED,IAAIL,GAAQ;AACXQ,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,UAAU,SAAAL,EAAO,CAAC;EAC7D;EAED,UAAUA,GAAQ;AACjBQ,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,aAAa,SAAAL,EAAO,CAAC;EAChE;EAED,OAAOA,GAAQ;AAEdQ,MAAA,MAAKH,CAAAA,EAAiB,YAAY,EAAC,QAAQ,aAAa,SAAAL,EAAO,CAAC;EAChE;AACF;AA9GCI,IAAA,oBAAA,QAAA,GACAC,IAAA,oBAAA,QAAA,GAuBMH,IAAA,oBAAA,QAAA,GAAAU,IAAU,eAACG,GAAQ;AAExB,SAAAP,EAAA,MAAKH,CAAAA,EAAiB,YAAY;IACjC,QAAQ;IACR,QAAQG,EAAA,MAAKJ,CAAAA;IACb,OAAOW,EAAO,OAAO;IACrB,QAAQA,EAAO,OAAO;IACtB,SAASA,EAAO;EACnB,GAAK,CAACP,EAAA,MAAKJ,CAAAA,CAAgB,CAAC,GAG1BI,EAAA,MAAKH,CAAAA,EAAiB,YAAY,CAACW,MAAM;AACxC,YAAQA,EAAE,KAAK,QAAM;MACpB,KAAK;AACJ,aAAK,oBAAqB;AAC1B;MACD,KAAK;AACJ;MACD,KAAK;AACDA,UAAE,KAAK,MACT,KAAK,qBAAqBA,EAAE,KAAK,EAAE,EAAEA,EAAE,KAAK,EAAE;AAE/C;MACD,KAAK;AACJ,aAAK,aAAaA,EAAE,KAAK,GAAG;AAC5B;MACD,KAAK;AACJ,aAAK,eAAgB;AACrB;MACD,KAAK;AACJ,aAAK,aAAaA,EAAE,KAAK,MAAM;AAC/B;IACD;EACD,GAED,MAAMR,EAAA,MAAKH,CAAAA,EAAiB,MAE5B,KAAK,eAAe,IAAI,GAEjB;AACP;",
  "names": ["WorldOffScreen", "options", "__privateAdd", "_initScene", "__publicField", "_offscreenCanvas", "_OffscreenWorker", "__privateSet", "worldWorker", "__privateGet", "resolve", "reject", "__privateMethod", "initScene_fn", "port", "error", "config", "e"]
}
